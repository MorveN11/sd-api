services:
    postgres:
        image: postgres:latest
        container_name: postgres
        restart: always
        environment:
            POSTGRES_DB: postgres-db
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            TZ: "UTC-4"
        ports:
            - 5432:5432
        volumes:
            - postgres-data:/var/lib/postgresql/data
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres-db']
            interval: 5s
            timeout: 5s
            retries: 10
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '1'
                    memory: 1G

    redis:
        image: redislabs/redismod
        container_name: stage.redis
        volumes:
            - redis-data:/data
        ports:
            - '6379:6379'
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M

    api1:
        image: ${DOCKER_REGISTRY-}webapi
        container_name: api_instance_1
        build:
            context: ./
            dockerfile: ./Project.Api/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_HTTP_PORTS=8080
        ports:
            - '5434:8080'
        depends_on:
            postgres:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '1'
                    memory: 1G

    api2:
        image: ${DOCKER_REGISTRY-}webapi
        container_name: api_instance_2
        build:
            context: ./
            dockerfile: ./Project.Api/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_HTTP_PORTS=8080
            - ApplyMigrations=false
        ports:
            - '5435:8080'
        depends_on:
            postgres:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '1'
                    memory: 1G

    loadbalancer:
        image: nginx:latest
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
        ports:
            - "8123:8123"
        depends_on:
            - api1
            - api2
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M

volumes:
    pgadmin-data:
    postgres-data:
    redis-data:
